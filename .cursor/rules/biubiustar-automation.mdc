---
description: biubiustar-trae项目的数据库相关操作 测试
alwaysApply: false
---
## 执行优先级

### 高优先级（立即执行）
1. 数据库连接脚本（需要时）
2. 核心问题修复
3. 缓存清理（修复后）

### 中优先级（需要确认）
- 新功能开发
- 大规模重构
- 外部依赖变更

### 低优先级（可选）
- 代码优化建议
- 文档更新
- 性能微调

---

## 示例工作流

### 修复数据格式问题
1. 诊断问题 → `php scripts/database.php` 测试连接
2. 查询当前状态 → 使用 `db()->fetchAll()` 检查数据
3. 执行修复 → 使用 `db()->execute()` 更新数据
4. 验证修复结果 → 再次查询确认
5. 自动清理缓存 → `./scripts/auto_cache_clear.sh`
6. 提醒用户测试 → 访问相关页面验证

### 添加新语言
1. 连接数据库 → `php scripts/database.php`
2. 检查现有语言 → `db()->fetchAll("SELECT * FROM " . table('ldcms_langs'))`
3. 插入新语言 → `db()->execute("INSERT INTO ...")`
4. 添加站点配置 → `db()->execute("INSERT INTO " . table('ldcms_siteinfo'))`
5. 自动清理缓存 → `./scripts/auto_cache_clear.sh`
6. 验证结果 → 检查后台多语言管理

---

## 记忆与学习

### 成功模式记录
- 每次成功的修复流程都应该被记录到项目记忆中
- 常见问题的解决方案应该形成标准化流程
- 重复出现的问题需要建立预防机制

### 失败经验总结
- 记录失败的尝试和原因
- 更新规则以避免重复错误
- 改进自动化脚本的健壮性

---

## 注意事项

1. **安全第一**：所有数据库操作都要有事务保护
2. **备份意识**：重要修改前考虑数据备份
3. **测试驱动**：修改后必须验证功能正常
4. **用户体验**：确保修复不影响前台访问
5. **版本控制**：重要修改完成后提醒用户提交代码

---

*本规则文件确保 biubiustar-trae 项目的维护和开发过程标准化、自动化，提高效率和可靠性。*